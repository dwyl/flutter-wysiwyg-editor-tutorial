// Mocks generated by Mockito 5.4.2 from annotations
// in app/test/emoji_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:app/main.dart' as _i2;
import 'package:file_picker/file_picker.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i2.PlatformService {
  MockPlatformService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool isWebPlatform() => (super.noSuchMethod(
        Invocation.method(
          #isWebPlatform,
          [],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ImageFilePicker].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageFilePicker extends _i1.Mock implements _i2.ImageFilePicker {
  MockImageFilePicker() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.FilePickerResult?> pickImage() => (super.noSuchMethod(
        Invocation.method(
          #pickImage,
          [],
        ),
        returnValue: _i3.Future<_i4.FilePickerResult?>.value(),
      ) as _i3.Future<_i4.FilePickerResult?>);
}
